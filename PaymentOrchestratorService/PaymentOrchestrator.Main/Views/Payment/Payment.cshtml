@model PaymentViewModel

@{
    ViewBag.Title = "Оплата корзины";
}

<div class="container mt-5">
    <h2 class="text-center mb-4">Оплата</h2>

    <form id="paymentForm" method="post" action="http://localhost:5281/payment/PaymentConfirm" class="needs-validation">

        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Список товаров:</h3>
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var product in Model.Products)
                        {
                            <li class="list-group-item">@product.Title - Цена: @product.Price</li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card payment-card">
                    <div class="card-body">
                        <h3 class="card-title mb-3">Выбор способа оплаты:</h3>
                        <div class="form-check mb-2">
                            <input type="radio" onclick="toggleCardFields()" name="paymentType" value="Card" class="form-check-input" required>
                            <label class="form-check-label"> Оплата картой</label>
                        </div>
                        <div class="form-check mb-2">
                            <input type="radio" name="paymentType" value="Cash" class="form-check-input">
                            <label class="form-check-label"> Оплата наличными</label>
                        </div>

                        <div id="cardDetails" class="card-details" style="display: none;">
                            <h3 class="mt-3">Введите данные карты:</h3>
                            <div class="form-group">
                                <label for="cardNumber">Номер карты:</label>
                                <input type="text" id="cardNumber" name="cardNumber" class="form-control">
                            </div>
                            <div class="form-group">
                                <label for="expiryDate">Дата истечения срока действия:</label>
                                <input type="text" id="expiryDate" name="expiryDate" placeholder="MM/YY" class="form-control">
                            </div>
                            <div class="form-group">
                                <label for="cvv">CVV:</label>
                                <input type="text" id="cvv" name="cvv" class="form-control">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <h3>Дополнительная информация:</h3>
            <div class="form-group mb-3">
                <label for="comment">Комментарий:</label>
                <p>@Model.Order.Comment</p>
            </div>
            <div class="form-group">
                <label for="address">Адрес:</label>
                <p>@Model.Order.ClientAddress</p>
            </div>
        </div>
        <input type="hidden" id="orderId" name="orderId" value="@Model.Order!.Id"/>
        <button type="submit" value="Submit" class="btn btn-primary mt-3">Оплатить</button>
    </form>

    <div id="error-message" class="mt-3" style="display: none;">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Ошибка оплаты!</h4>
            <p id="error-body"></p>
        </div>
    </div>
</div>

<script>
    function toggleCardFields() {
        var cardDetails = document.getElementById("cardDetails");
        cardDetails.style.display = cardDetails.style.display === "none" ? "block" : "none";
    }

    document.getElementById('paymentForm').addEventListener('submit', async (event) => {
        event.preventDefault(); // Предотвращаем стандартную отправку формы
        
        try {
            const formData = new FormData(event.target);
            const data = {}; // Create an empty object

            // Loop through FormData entries and add them to the object
            for (const [key, value] of formData.entries()) {
                data[key] = value;
            }

            const response = await fetch('http://localhost:5281/payment/PaymentConfirm', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'UserId': AuthHeaders.UserId,
                    'Role': AuthHeaders.Role
                },
                body: JSON.stringify(data) // Send the JSON object
            });

            if (response.ok) {
                window.location.href = response.url;
            } else {
                // Ошибка при оплате
                const errorBody = await response.text(); // Получаем текст ошибки
                document.getElementById('error-body').textContent = errorBody;
                document.getElementById('error-message').style.display = 'block';
            }
        } catch (error) {
            console.error('Ошибка при отправке формы:', error);
        }
    });
</script>