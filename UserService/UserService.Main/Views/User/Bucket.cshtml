@model BucketViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>–ö–æ—Ä–∑–∏–Ω–∞üß∫</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<div class="container">
    <div class="cart bg-light p-4 rounded">
        <h2 class="text-center">–ö–æ—Ä–∑–∏–Ω–∞üß∫</h2>
        <div id="cart-items">
            @foreach (var product in Model.Products)
            {
            <div class="cart-item mb-3">
                <div class="product-card p-3 border rounded">
                    <h5>@product.Title</h5>
                    <p>–¶–µ–Ω–∞: @product.Price.ToString("0.##") –†—É–±.</p>
                    <p>
                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: @product.Quantity
                        <button type="button" class="btn btn-sm btn-secondary" onclick="decreaseQuantity('@product.Id')">-</button>
                        <input type="number" min="1" value="@product.Quantity" onchange="updateQuantity('@product.Id', this.value)" style="width: 50px;">
                        <button type="button" class="btn btn-sm btn-secondary" onclick="increaseQuantity('@product.Id')">+</button>
                    </p>
                    <button type="button" class="btn btn-danger btn-sm" onclick="removeFromCart('@product.Id')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
            }
        </div>
        <div class="total">
            <p>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <span id="totalAmount">0</span> –†—É–±.</p>
            <button type="button" class="btn btn-primary" onclick="checkout()">–û–ø–ª–∞—Ç–∏—Ç—å</button>
        </div>

        <div class="mt-4">
            <label for="addressSelect">–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:</label>
            <select id="addressSelect" onchange="addressSelectionChanged(this)" class="form-select mb-3">
                @foreach (var address in Model.Addresses)
                {
                <option value="@address">@address</option>
                }
                <option value="custom">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å—Å</option>
            </select>

            <input type="text" id="customAddressInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å" oninput="customAddressChanged(this)" style="display: none;" class="form-control mb-3">

            <label for="comment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
            <input type="text" id="comment" value="@Model.DefaultComment" onclick="clearCommentField()" class="form-control">
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"></script>

<script>

    function updateSelectedAddress(address) {
        document.getElementById('customAddressInput').value = address;
        
    }

    function clearCommentField() {
        document.getElementById('comment').value = '';
    }
    
    function truncateText(text, maxLength) {
        if (text.length > maxLength) {
            return text.substring(0, maxLength) + '...';
        }
        return text;
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        displayCart();

        document.querySelectorAll('.product-info h5').forEach(element => {
            element.textContent = truncateText(element.textContent, 10);
        });
    });

    function addToCart(id, title, price) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let product = cart.find(p => p.id === id);

        if (product) {
            product.quantity++;
        } else {
            cart.push({ id: id, title: title, price: parseFloat(price), quantity: 1 });
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        displayCart();
    }

    function displayCart() {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let cartContainer = document.getElementById('cart-items');
        let totalAmountElem = document.getElementById('totalAmount');
        cartContainer.innerHTML = '';
        let totalAmount = 0;

        if (cart.length === 0) {
            cartContainer.innerHTML = '<p class="text-center">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
            totalAmountElem.textContent = totalAmount.toFixed(2);
            return;
        }

        cart.forEach(product => {
            let productElem = document.createElement('div');
            productElem.className = 'cart-item';
            productElem.innerHTML = `
                <div class="product-card" style="border: 1px solid #ccc; padding: 10px; border-radius: 5px; background-color: #f8f9fa;">
                    <h5>${truncateText(product.title, 10)}</h5>
                    <p>–¶–µ–Ω–∞: ${product.price.toFixed(2)} –†—É–±.</p>
                    <p>
                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:
                        <button type="button" class="btn btn-sm btn-secondary" onclick="decreaseQuantity('${product.id}')">-</button>
                        <input type="number" min="1" value="${product.quantity}" onchange="updateQuantity('${product.id}', this.value)" style="width: 50px;">
                        <button type="button" class="btn btn-sm btn-secondary" onclick="increaseQuantity('${product.id}')">+</button>
                    </p>
                    <button type="button" class="btn btn-danger btn-sm" onclick="removeFromCart('${product.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            cartContainer.appendChild(productElem);
            totalAmount += product.price * product.quantity;
        });

        totalAmountElem.textContent = totalAmount.toFixed(2);
    }

    function decreaseQuantity(id) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let product = cart.find(p => p.id === id);

        if (product && product.quantity > 1) {
            product.quantity--;
            localStorage.setItem('cart', JSON.stringify(cart));
            displayCart();
        }
    }

    function increaseQuantity(id) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let product = cart.find(p => p.id === id);

        if (product) {
            product.quantity++;
            localStorage.setItem('cart', JSON.stringify(cart));
            displayCart();
        }
    }

    function updateQuantity(id, value) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let product = cart.find(p => p.id === id);

        if (product) {
            product.quantity = parseInt(value);
            localStorage.setItem('cart', JSON.stringify(cart));
            displayCart();
        }
    }

    function removeFromCart(id) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        cart = cart.filter(p => p.id !== id);
        localStorage.setItem('cart', JSON.stringify(cart));
        displayCart();
    }

    function checkout() {
        // –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        alert('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
        localStorage.removeItem('cart');
        displayCart();
    }

    function addressSelectionChanged(select) {
        if (select.value === 'custom') {
            document.getElementById('customAddressInput').style.display = 'block';
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –≤ –º–æ–¥–µ–ª—å –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å—é–¥–∞
        } else {
            document.getElementById('customAddressInput').style.display = 'none';
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –≤ –º–æ–¥–µ–ª—å –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å—é–¥–∞
        }
    }

    function customAddressChanged(input) {
        let customAddress = input.value;
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å –≤ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å—é–¥–∞
    }

</script>

</body>
</html>