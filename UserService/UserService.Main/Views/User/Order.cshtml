@model OrdersViewModel

@{
    ViewBag.Title = "Orders";
    Layout = "_Layout";
}

<h2>Orders</h2>

<table id="ordersTable" class="table table-striped table-bordered table-hover text-center" style="width: 100%; vertical-align: middle;">
    <thead>
    <tr>
        <th>OrderId</th>
        <th>Status</th>
        <th>Price</th>
        <th>Comment</th>
        <th>Client Address</th>
        <th>Courier Number</th>
        <th>Client Number</th>
        <th>Cheque</th>
        <th>Basket</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
    
    const STATUS_CHECK_INTERVAL = 1000; 
    
    let ordersToCheck = [];
    
    window.onload = function() {
        getOrders();
        setInterval(checkOrderStatus, STATUS_CHECK_INTERVAL);
    };
    function getOrders() {
        fetch('http://localhost:5106/orders/client/current')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Can not take current orders. URL: ${response.url}. Error = ${response.status} - ${response.statusText}`);                }
                return response.json();
            })
            .then(data => {
                displayOrders(data);
                ordersToCheck = data.map(order => order.id);
            })
            .catch(error => {
                console.error('Ошибка при получении данных:', error);
                });
    }

    function displayOrders(orders) {
        const ordersTable = document.getElementById('ordersTable').getElementsByTagName('tbody')[0];

        ordersTable.innerHTML = '';

        orders.forEach(order => {
            const row = ordersTable.insertRow();

            row.insertCell().textContent = order.id;
            row.insertCell().textContent = order.status;
            row.insertCell().textContent = order.price;
            row.insertCell().textContent = order.comment;
            row.insertCell().textContent = order.clientAddress;
            row.insertCell().textContent = order.courierNumber;
            row.insertCell().textContent = order.clientNumber;
            row.insertCell().textContent = order.cheque;

            const basketCell = row.insertCell();
            order.basket.forEach(item => {
                const listItem = document.createElement('li');
                listItem.textContent = `${item.productId} - ${item.amount} - ${item.price}`;
                basketCell.appendChild(listItem);
            });

            const actionsCell = row.insertCell();
            const cancelButton = document.createElement('button');
            cancelButton.classList.add('btn', 'btn-secondary');
            cancelButton.textContent = 'Cancel';
            cancelButton.onclick = () => cancelOrder(order.id);
            actionsCell.appendChild(cancelButton);

            const reasonInput = document.createElement('input');
            reasonInput.setAttribute('type', 'text');
            reasonInput.setAttribute('id', `reason-${order.id}`);
            reasonInput.setAttribute('placeholder', 'Причина отмены');
            actionsCell.appendChild(reasonInput);
        });
    }

    function cancelOrder(orderId) {
        let confirmation = confirm(`Вы уверены, что хотите отменить заказ id = ${orderId}?`);
        if (confirmation) {
        
        const reason = document.getElementById(`reason-${orderId}`).value;
            
        fetch(`http://localhost:5106/orders/client/cancel/${orderId}`, { 
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reasonOfCanceled: reason })
        })
            .then(response => {
                getOrders();
                alert('Заказ отменен');
                console.log('Заказ отменен', response);
            })
            .catch(error => {
                alert('Произошла ошибка')
                console.error('Ошибка при отмене заказа:', error);
            });
        }
    }
    
    async function checkOrderStatus() {
        const promises = ordersToCheck.map(async (orderId) => {
            try {
                const response = await fetch(`http://localhost:5106/orders/status/${orderId}`);
                if (response.ok) {
                    const orderData = await response.text();
                    updateOrderStatus(orderId, orderData);
                } else {
                    console.error(`Ошибка при получении статуса заказа ${orderId}`, response);
                }
            } catch (error) {
                console.error(`Ошибка при проверке статуса заказа ${orderId}:`, error);
            }
        });
        await Promise.all(promises);
    }

    function updateOrderStatus(orderId, newStatus) {
        const ordersTable = document.getElementById('ordersTable').getElementsByTagName('tbody')[0];
        const rows = ordersTable.querySelectorAll('tr');
        const orderRow = Array.from(rows).find(row => row.cells[0].textContent === orderId.toString());
        if (orderRow) {
            orderRow.cells[1].textContent = newStatus;
        }
    }

</script>